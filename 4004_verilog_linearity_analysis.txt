================================================================================
Intel 4004 ALU Verilog 线性/非线性运算分析报告
================================================================================

📊 运算分布统计:
  线性运算: 52 个
  非线性运算: 0 个
  控制逻辑: 4 个
  存储更新: 18 个
  总语句数: 74 个

🔵 线性运算部分 (52 个):
  ├─ 特点: 加法、减法、位运算、比较运算
  └─ 硬件实现: 简单组合逻辑，延迟低

  1. 行 76: n0854
     运算: ~
     表达式: ~(~x12)
     复杂度: 1

  2. 行 77: n0351
     运算: |, ~
     表达式: ~(x21_clk2 | ~dcl)
     复杂度: 2

  3. 行 78: n0415
     运算: |, ~
     表达式: ~(x21_clk2 | ope_n)
     复杂度: 2

  4. 行 79: add_ib
     运算: |, ~
     表达式: ~(x31_clk2 | ~inc_isz)
     复杂度: 2

  5. 行 80: cy_ib
     运算: |, ~
     表达式: ~(x31_clk2 | ~iow)
     复杂度: 2

  6. 行 81: acb_ib
     运算: |, &, ~
     表达式: ~((x31_clk2 | ~xch) & (x21_clk2 | ~iow))
     复杂度: 3

  7. 行 82: n0477
     运算: |, &, ~
     表达式: ~((~x31_clk2 & ~ior) | (a12 & ior))
     复杂度: 3

  8. 行 83: adc_cy
     运算: |, ~
     表达式: ~(write_carry_2 | n0477)
     复杂度: 2

  9. 行 84: add_acc
     运算: |, ~
     表达式: ~(write_acc_1 | n0477)
     复杂度: 2

  10. 行 85: adsr
     运算: |, ~
     表达式: ~(x31_clk2 | ~rar)
     复杂度: 2
     ... 还有 42 个线性运算

🟡 控制逻辑部分 (4 个):
  ├─ 特点: 条件选择、分支判断
  └─ 硬件实现: 多路选择器、条件逻辑

  1. 行 138: n0911
     控制类型: |, &, ~, ?:
     表达式: ~(n0550 ? (n0887 | n0870) : (n0887 & n0870))

  2. 行 140: n0912
     控制类型: |, &, ~, ?:
     表达式: ~(n0553 ? (n0889 | n0871) : (n0889 & n0871))

  3. 行 142: n0913
     控制类型: |, &, ~, ?:
     表达式: ~(n0556 ? (n0891 | n0872) : (n0891 & n0872))

  4. 行 144: n0914
     控制类型: |, &, ~, ?:
     表达式: ~(n0559 ? (n0893 | n0873) : (n0893 & n0873))

🟢 存储更新部分 (18 个):
  ├─ 特点: 寄存器赋值、状态更新
  └─ 硬件实现: 触发器、锁存器

  1. n0889 (复杂度: 1)
     表达式: ~tmp[1]

  2. n0893 (复杂度: 1)
     表达式: ~tmp[3]

  3. n0550 (复杂度: 1)
     表达式: ~cy

  4. tmp (复杂度: 0)
     表达式: data

  5. tmp (复杂度: 0)
     表达式: 4'b1111

  6. n0887 (复杂度: 0)
     表达式: tmp[0]

  7. n0891 (复杂度: 0)
     表达式: tmp[2]

  8. n0550 (复杂度: 0)
     表达式: 1'b0

💡 设计优化建议:
  📊 线性化程度: 70.3% (线性运算占比)
     ✅ 设计线性度良好，硬件实现相对简单

================================================================================
提取的代码段
================================================================================

## Linear Code:
// 线性运算: ~
wire n0854		= ~(~x12);
// 线性运算: |, ~
wire n0351		= ~(x21_clk2 | ~dcl);
// 线性运算: |, ~
wire n0415		= ~(x21_clk2 | ope_n);
// 线性运算: |, ~
wire add_ib		= ~(x31_clk2 | ~inc_isz);
// 线性运算: |, ~
wire cy_ib		= ~(x31_clk2 | ~iow);
// 线性运算: |, &, ~
wire acb_ib		= ~((x31_clk2 | ~xch) & (x21_clk2 | ~iow));
// 线性运算: |, &, ~
wire n0477		= ~((~x31_clk2 & ~ior) | (a12 & ior));
// 线性运算: |, ~
wire adc_cy		= ~(write_carry_2 | n0477);
// 线性运算: |, ~
wire add_acc	= ~(write_acc_1 | n0477);
// 线性运算: |, ~
wire adsr		= ~(x31_clk2 | ~rar);
// 线性运算: |, ~
wire adsl		= ~(x31_clk2 | ~ral);
// 线性运算: |, ~
wire acc_adac	= ~(~cma | n0342);
// 线性运算: |, ~
wire acc_ada	= ~(read_acc_3 | n0342);
// 线性运算: |, ~
wire cy_ada		= ~(add_group_4 | n0342);
// 线性运算: |, ~
wire cy_adac	= ~(sub_group_6 | n0342);
// 线性运算: |, ~
wire n0546 = ~(inc_group_5 | n0342);
// 线性运算: assignment
wire n0553 = n0911;
// 线性运算: assignment
wire n0556 = n0912;
// 线性运算: assignment
wire n0559 = n0913;
// 线性运算: assignment
wire n0861 = n0914;
// 线性运算: |, &, ~
wire n0877 = ~((n0893 & n0559 & n0873) | (n0861 & (n0893 | n0873 | n0559)));
// 线性运算: |, &, ~
wire n0878 = ~((n0877 & n0550 & n0870) | (n0553 & (n0887 | n0870 | n0550)));
// 线性运算: |, &, ~
wire n0875 = ~((n0889 & n0553 & n0871) | (n0556 & (n0889 | n0871 | n0553)));
// 线性运算: |, &, ~
wire n0879 = ~((n0891 & n0556 & n0872) | (n0559 & (n0891 | n0872 | n0556)));
// 线性运算: ~
wire n0846 = ~n0878;
// 线性运算: assignment
wire n0847 =  n0875;
// 线性运算: ~
wire n0848 = ~n0879;
// 线性运算: assignment
wire n0514 =  n0877;
// 线性运算: |, &, ~
wire n0803 = ~((acc_out[3] & (acc_out[2] | acc_out[1])) | cy_1);
// 线性运算: |, ~
wire n0403 = ~(~daa | n0803);
// 线性运算: assignment
wire [3:0] acc_in = {n0514, n0848, n0847, n0846};
// 线性运算: |, ~
assign acc_0 = ~|acc_out;
// 线性运算: |, ~
assign add_0 = ~|acc_in;
// 线性运算: |, &, ~
wire n0378 = ~((daa & n0803) | o_ib);
// 线性运算: &, ==
wire n0345 =  kbp & (acc_out == 4'b1000);
// 线性运算: &, ==
wire n0354 =  kbp & (acc_out == 4'b0100);
// 线性运算: &, ==
wire n0363 =  kbp & (acc_out == 4'b0010);
// 线性运算: &, ==
wire n0370 =  kbp & (acc_out == 4'b0001);
// 线性运算: |, &, ==, ~
wire n0377 = (kbp & (acc_out == 4'b0000)) | ~n0378;
// 线性运算: |, ~
wire n0358 = ~(n0345 | n0354 | n0363 | n0370 | n0377 |       n0403);
// 线性运算: |, ~
wire n0366 = ~(        n0354 | n0363 | n0370 | n0377 | tcs        );
// 线性运算: |, ~
wire n0359 = ~(n0345 |                 n0370 | n0377 | tcs        );
// 线性运算: |, ~
wire n0357 = ~(n0345 |         n0363 |         n0377 |       n0403);
// 线性运算: assignment
assign data = dout;
// 线性运算: ~
wire n0355 = ~acc_out[2];
// 线性运算: ~
wire n0364 = ~acc_out[1];
// 线性运算: ~
wire n0371 = ~acc_out[0];
// 线性运算: |, ~
assign cmram3 = ~(com_n | n0749);
// 线性运算: |, ~
assign cmram2 = ~(com_n | n0750);
// 线性运算: |, ~
assign cmram1 = ~(com_n | n0751);
// 线性运算: |, ~
assign cmram0 = ~(com_n | ~n0749 | ~n0750 | ~n0751);
// 线性运算: |, ~
assign cmrom  = ~(com_n | poc);


## Control Code:
// 控制逻辑: |, &, ~, ?:
wire n0911 = ~(n0550 ? (n0887 | n0870) : (n0887 & n0870));
// 控制逻辑: |, &, ~, ?:
wire n0912 = ~(n0553 ? (n0889 | n0871) : (n0889 & n0871));
// 控制逻辑: |, &, ~, ?:
wire n0913 = ~(n0556 ? (n0891 | n0872) : (n0891 & n0872));
// 控制逻辑: |, &, ~, ?:
wire n0914 = ~(n0559 ? (n0893 | n0873) : (n0893 & n0873));


## Storage Code:
// 存储更新: tmp
tmp <= data;
// 存储更新: tmp
tmp <= 4'b1111;
// 存储更新: n0887
n0887 <= tmp[0];
// 存储更新: n0889
n0889 <= ~tmp[1];
// 存储更新: n0891
n0891 <= tmp[2];
// 存储更新: n0893
n0893 <= ~tmp[3];
// 存储更新: n0550
n0550 <= 1'b0;
// 存储更新: n0550
n0550 <= 1'b1;
// 存储更新: n0550
n0550 <= ~cy;
// 存储更新: n0550
n0550 <= cy;
// 存储更新: acc
acc <= acc_in;
// 存储更新: cy
cy <= n0861;
// 存储更新: cy
cy <= 1'b1;
// 存储更新: cy_1
cy_1 <= cy;
// 存储更新: acc_out
acc_out <= acc;
// 存储更新: n0749
n0749 <= 1'b1;
// 存储更新: n0750
n0750 <= 1'b1;
// 存储更新: n0751
n0751 <= 1'b1;
